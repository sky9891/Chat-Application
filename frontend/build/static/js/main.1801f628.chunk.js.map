{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","animations/TypingIndicator.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","variant","Signup","showPassword","setShowPassword","name","setName","confirmPassword","setConfirmPassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","FormData","append","fetch","method","body","then","res","json","secure_url","console","log","catch","err","postDetails","files","_error$response","_error$response$data","Homepage","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","display","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","color","textAlign","dateString","createdAt","Date","toLocaleTimeString","hour","minute","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","TypingIndicator","height","Lottie","animationData","typingAnimation","loop","API_URL","process","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","useCallback","emit","io","on","disconnect","handleMessageReceived","newMessageRecieved","chat","includes","off","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","messageContent","lastTypingTime","getTime","setTimeout","getSenderFull","Chatbox","ChatLoading","count","Stack","Array","fill","_","Skeleton","Math","floor","random","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","_JSON$parse","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","BellIcon","top","right","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.1801f628.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email-login\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password-login\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\"; // ✅ v5\n\nconst Signup = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClick = () => setShowPassword(!showPassword);\n\n  const toast = useToast();\n  const history = useHistory(); // ✅ v5\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [pic, setPic] = useState(\"\");\n  const [picLoading, setPicLoading] = useState(false);\n\n  // ----------------- Image Upload -----------------\nconst postDetails = (pics) => {\n  setPicLoading(true);\n\n  if (!pics) {\n    toast({\n      title: \"Please Select an Image!\",\n      status: \"warning\",\n      duration: 5000,\n      isClosable: true,\n      position: \"bottom\",\n    });\n    setPicLoading(false);\n    return;\n  }\n\n  if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n    const data = new FormData();\n    data.append(\"file\", pics); // attach file\n    data.append(\"upload_preset\", \"Chat-App\"); // ✅ must be an **unsigned preset** in Cloudinary\n\n    fetch(\"https://api.cloudinary.com/v1_1/dzhtotsmt/image/upload\", {\n      method: \"POST\",\n      body: data, // do NOT set Content-Type manually\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.secure_url) {\n          setPic(data.secure_url); // save uploaded image URL\n          console.log(\"Uploaded Image URL:\", data.secure_url);\n        } else {\n          toast({\n            title: \"Image Upload Failed\",\n            status: \"error\",\n            duration: 5000,\n            isClosable: true,\n            position: \"bottom\",\n          });\n        }\n        setPicLoading(false);\n      })\n      .catch((err) => {\n        console.log(err);\n        toast({\n          title: \"Error Uploading Image\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n        setPicLoading(false);\n      });\n  } else {\n    toast({\n      title: \"Please Select a JPEG or PNG Image!\",\n      status: \"warning\",\n      duration: 5000,\n      isClosable: true,\n      position: \"bottom\",\n    });\n    setPicLoading(false);\n  }\n};\n\n\n  // ----------------- Form Submission -----------------\n  const submitHandler = async () => {\n    setPicLoading(true);\n\n    if (!name || !email || !password || !confirmPassword) {\n      toast({\n        title: \"Please Fill All Fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n\n    try {\n      const config = { headers: { \"Content-Type\": \"application/json\" } };\n      const { data } = await axios.post(\n        \"/api/user\",\n        { name, email, password, pic },\n        config\n      );\n\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\"); // ✅ v5\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: error.response?.data?.message || error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n\n      <FormControl id=\"email-signup\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n\n      <FormControl id=\"password-signup\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={showPassword ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {showPassword ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n\n      <FormControl id=\"confirm-password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={showPassword ? \"text\" : \"password\"}\n            placeholder=\"Confirm Password\"\n            value={confirmPassword}\n            onChange={(e) => setConfirmPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {showPassword ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          CHAT APP\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton\n          display={{ base: \"flex\" }} // ✅ fixed\n          icon={<ViewIcon />}\n          onClick={onOpen}\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            display=\"flex\" // ✅ fixed\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            display=\"flex\" // ✅ fixed\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  // 🔹 [NEW] Helper function to format time\n  const formatTime = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" });\n  };\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {/* 🔹 [CHANGED] Wrapped message content in <div> */}\n              <div>{m.content}</div>\n\n              {/* 🔹 [NEW] Timestamp below message */}\n              <div\n                style={{\n                  fontSize: \"0.75rem\",\n                  color: \"gray\",\n                  textAlign: \"right\",\n                  marginTop: \"2px\",\n                }}\n              >\n                {formatTime(m.createdAt)}\n              </div>\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  // 🔥 FUNCTIONS (you must keep these inside the component)\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) return;\n\n    try {\n      setLoading(true);\n      const config = { headers: { Authorization: `Bearer ${user.token}` } };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n    try {\n      setRenameLoading(true);\n      const config = { headers: { Authorization: `Bearer ${user.token}` } };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        { chatId: selectedChat._id, chatName: groupChatName },\n        config\n      );\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    try {\n      setLoading(true);\n      const config = { headers: { Authorization: `Bearer ${user.token}` } };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        { chatId: selectedChat._id, userId: user1._id },\n        config\n      );\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    try {\n      setLoading(true);\n      const config = { headers: { Authorization: `Bearer ${user.token}` } };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        { chatId: selectedChat._id, userId: user1._id },\n        config\n      );\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  // 🔥 RENDER\n  return (\n    <>\n      <IconButton\n        display={{ base: \"flex\" }}\n        icon={<ViewIcon />}\n        onClick={onOpen}\n      />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody display=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n\n            <FormControl display=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","// TypingIndicator.js\r\nimport React from \"react\";\r\nimport Lottie from \"lottie-react\";\r\nimport typingAnimation from \"./typing.json\"; // make sure path is correct\r\n\r\nconst TypingIndicator = () => {\r\n  return (\r\n    <div style={{ width: 60, height: 30 }}>\r\n      <Lottie animationData={typingAnimation} loop={true} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingIndicator;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport TypingIndicator from \"../animations/TypingIndicator\"; // ✅ new import\n\n// Use environment variable or fallback\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5001\";\nlet socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = useCallback(async () => {\n    if (!selectedChat) return;\n\n    try {\n      setLoading(true);\n      const config = { headers: { Authorization: `Bearer ${user.token}` } };\n      const { data } = await axios.get(\n        `${API_URL}/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to load messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  }, [selectedChat, user, toast]);\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        const messageContent = newMessage;\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          `${API_URL}/api/message`,\n          { content: messageContent, chatId: selectedChat._id },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occurred!\",\n          description: \"Failed to send the message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(API_URL);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    return () => {\n      socket.disconnect();\n    };\n  }, [user]);\n\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n  }, [selectedChat, fetchMessages]);\n\n  useEffect(() => {\n    const handleMessageReceived = (newMessageRecieved) => {\n      if (\n        !selectedChatCompare ||\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    };\n\n    socket.on(\"message recieved\", handleMessageReceived);\n\n    return () => {\n      socket.off(\"message recieved\", handleMessageReceived);\n    };\n  }, [messages, notification, fetchAgain, setFetchAgain, setNotification]);\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n\n    const lastTypingTime = new Date().getTime();\n    const timerLength = 3000;\n\n    setTimeout(() => {\n      const timeNow = new Date().getTime();\n      const timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              display={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n\n          <Box\n            display=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl onKeyDown={sendMessage} isRequired mt={3}>\n              {istyping && <TypingIndicator />}{\" \"}\n              {/* ✅ clean typing animation */}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          h=\"100%\"\n        >\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack, Box } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = ({ count = 8 }) => {\n  return (\n    <Stack spacing={3}>\n      {Array(count)\n        .fill(\"\")\n        .map((_, i) => (\n          <Box\n            key={i}\n            display=\"flex\"\n            justifyContent={i % 2 === 0 ? \"flex-start\" : \"flex-end\"} // 🔥 alternate left/right\n          >\n            <Skeleton\n              height=\"40px\"\n              width={`${Math.floor(Math.random() * 40) + 40}%`} // 🔥 random width 40–80%\n              borderRadius=\"20px\" // 🔥 bubble look\n            />\n          </Box>\n        ))}\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            display=\"flex\" // ✅ fixed\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody display=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            {\" \"}\n            {/* ✅ fixed */}\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\">\n              {\" \"}\n              {/* ✅ fixed */}\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\n// Use environment variable or fallback\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5001\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    try {\n      const token =\n        user?.token || JSON.parse(localStorage.getItem(\"userInfo\"))?.token;\n      if (!token) return;\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      };\n\n      const { data } = await axios.get(`${API_URL}/api/chat`, config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setLoggedUser(userInfo);\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text, Badge } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\" // ✅ fixed\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text display={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          CHAT APP\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <Box position=\"relative\" display=\"inline-block\">\n                <BellIcon fontSize=\"2xl\" m={1} />\n                {notification.length > 0 && (\n                  <Badge\n                    colorScheme=\"red\"\n                    borderRadius=\"full\"\n                    position=\"absolute\"\n                    top=\"-1\"\n                    right=\"-1\"\n                    fontSize=\"0.7em\"\n                    px={2}\n                  >\n                    {notification.length}\n                  </Badge>\n                )}\n              </Box>\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box display=\"flex\" pb={2}>\n              {\" \"}\n              {/* ✅ fixed */}\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" display=\"flex\" />}{\" \"}\n            {/* ✅ fixed */}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}